service: bargain

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-finch

custom:
  bargainsTableName: bargains-table-${self:provider.stage}
  productsTableName: bargains-products-${self:provider.stage}
  subscriptionsTableName: bargain-subscriptions-table-${self:provider.stage}
  queueName: bargains-queue-${self:provider.stage}
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  client:
    bucketName: bargain-frontend-${self:provider.stage}
    distributionFolder: dist

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - Fn::GetAtt:
            - BargainsDynamoDBTable
            - Arn
        - Fn::Join:
            - ''
            - - Fn::GetAtt:
                  - BargainsDynamoDBTable
                  - Arn
              - '/index/*'
        - Fn::GetAtt:
            - SubscriptionsDynamoDBTable
            - Arn
        - Fn::GetAtt:
            - ProductDynamoDBTable
            - Arn
    - Effect: Allow
      Action:
        - sns:CreateTopic
        - sns:Publish
        - sns:Subscribe
      Resource: '*'
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        Fn::GetAtt:
          - TasksQueue
          - Arn

  environment:
    BARGAINS_TABLE: ${self:custom.bargainsTableName}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTableName}
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    QUEUE: ${self:custom.queueName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}
    memorySize: 256
  enqueue-tasks:
    handler: app.enqueue_tasks
    events:
      - schedule: rate(30 minutes)
    memorySize: 256
  handle-task:
    handler: app.handle_task
    reservedConcurrency: 10
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - TasksQueue
              - Arn
    memorySize: 256

resources:
  Resources:
    BargainsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bargainsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: bargainId
            AttributeType: S
          - AttributeName: productUrl
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: bargainId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
          - IndexName: productUrlIndex
            KeySchema:
              - AttributeName: productUrl
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
    SubscriptionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriptionsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
    TasksQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.queueName}
    ProductDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: productUrl
            AttributeType: S
        KeySchema:
          - AttributeName: productUrl
            KeyType: HASH

package:
  exclude:
    - node_modules/**
    - venv/**
    - .idea/**
    - __pycache__/**
    - .dynamodb/**
